-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( auth.uid() = id );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = id );

-- This trigger automatically creates a profile entry when a new user signs up.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Create contacts table for contact form submissions
create table contacts (
  id bigint generated by default as identity primary key,
  name text not null,
  email text not null,
  message text not null,
  timestamp timestamp with time zone default timezone('utc'::text, now()) not null,
  date text,
  time text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable RLS (Row Level Security)
alter table contacts enable row level security;

-- Create policy to allow anyone to insert contacts (for contact form)
create policy "Anyone can submit contact forms"
  on contacts for insert
  with check ( true );

-- Create policy to allow service role to read contacts
create policy "Service role can read contacts"
  on contacts for select
  using ( auth.role() = 'service_role' );